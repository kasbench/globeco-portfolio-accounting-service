{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Financial transaction processing and portfolio balance management microservice for GlobeCo benchmarking suite.\n\nThis service processes financial transactions and maintains portfolio account balances with:\n- Transaction creation and processing with comprehensive validation\n- Balance calculation and portfolio summary generation\n- Batch transaction processing for file imports\n- Real-time balance updates with optimistic locking\n- Integration with portfolio and security services",
        "title": "GlobeCo Portfolio Accounting Service API",
        "contact": {
            "name": "GlobeCo Support",
            "url": "https://github.com/kasbench/globeco-portfolio-accounting-service",
            "email": "noah@kasbench.org"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8087",
    "basePath": "/api/v1",
    "paths": {
        "/balance/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a specific balance record using its unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Balances"
                ],
                "summary": "Get balance by ID",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Balance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved balance",
                        "schema": {
                            "$ref": "#/definitions/dto.BalanceDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid balance ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Balance not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/balances": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve portfolio balances with optional filtering by portfolio, security, and quantity ranges. Supports pagination and sorting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Balances"
                ],
                "summary": "Get balances with filtering",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by portfolio ID (24 characters)",
                        "name": "portfolio_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by security ID (24 characters). Use 'null' for cash balances",
                        "name": "security_id",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Pagination offset (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of records to return (default: 50, max: 1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort fields (comma-separated): portfolio_id,security_id",
                        "name": "sortby",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved balances",
                        "schema": {
                            "$ref": "#/definitions/dto.BalanceListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns basic service health status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Basic health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/detailed": {
            "get": {
                "description": "Returns comprehensive health status including database, cache, external services, and system metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Detailed health check with dependencies",
                "responses": {
                    "200": {
                        "description": "Detailed health status with all dependency checks",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service or dependencies are unhealthy",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "description": "Returns liveness status for Kubernetes health checking (always returns healthy for running service)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Kubernetes liveness probe",
                "responses": {
                    "200": {
                        "description": "Service is alive",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthResponse"
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "Returns readiness status for Kubernetes traffic routing. Checks database and cache connectivity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Kubernetes readiness probe",
                "responses": {
                    "200": {
                        "description": "Service is ready to receive traffic",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service is not ready (dependencies unavailable)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/portfolios/{portfolioId}/summary": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a comprehensive summary of a portfolio including cash balance and all security positions with market values and statistics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Balances"
                ],
                "summary": "Get portfolio summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Portfolio ID (24 characters)",
                        "name": "portfolioId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved portfolio summary",
                        "schema": {
                            "$ref": "#/definitions/dto.PortfolioSummaryDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid portfolio ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Portfolio not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/swagger/doc.json": {
            "get": {
                "description": "Returns the OpenAPI 3.0 specification in JSON format",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documentation"
                ],
                "summary": "OpenAPI specification",
                "responses": {
                    "200": {
                        "description": "OpenAPI specification",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/swagger/index.html": {
            "get": {
                "description": "Interactive API documentation interface",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Documentation"
                ],
                "summary": "Swagger UI",
                "responses": {
                    "200": {
                        "description": "Swagger UI HTML page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transaction/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a specific transaction using its unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get transaction by ID",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved transaction",
                        "schema": {
                            "$ref": "#/definitions/dto.TransactionResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid transaction ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Transaction not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of transactions with optional filtering by portfolio, security, date range, transaction type, and status. Supports pagination and sorting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get transactions with filtering",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by portfolio ID (24 characters)",
                        "name": "portfolio_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by security ID (24 characters). Use 'null' for cash transactions",
                        "name": "security_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by transaction date (YYYYMMDD format)",
                        "name": "transaction_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "BUY",
                            "SELL",
                            "SHORT",
                            "COVER",
                            "DEP",
                            "WD",
                            "IN",
                            "OUT"
                        ],
                        "type": "string",
                        "description": "Filter by transaction type",
                        "name": "transaction_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "NEW",
                            "PROC",
                            "FATAL",
                            "ERROR"
                        ],
                        "type": "string",
                        "description": "Filter by transaction status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Pagination offset (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of records to return (default: 50, max: 1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort fields (comma-separated): portfolio_id,security_id,transaction_date,transaction_type,status",
                        "name": "sortby",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved transactions",
                        "schema": {
                            "$ref": "#/definitions/dto.TransactionListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create and process multiple transactions in a single request. Supports batch processing with individual transaction validation and error reporting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Create batch of transactions",
                "parameters": [
                    {
                        "description": "Array of transactions to create",
                        "name": "transactions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.TransactionPostDTO"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch processing completed (may include partial failures)",
                        "schema": {
                            "$ref": "#/definitions/dto.TransactionBatchResponse"
                        }
                    },
                    "207": {
                        "description": "Multi-status: some transactions succeeded, others failed",
                        "schema": {
                            "$ref": "#/definitions/dto.TransactionBatchResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation errors",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "413": {
                        "description": "Request too large (batch size limit exceeded)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.BalanceDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "portfolioId": {
                    "type": "string"
                },
                "quantityLong": {
                    "type": "number"
                },
                "quantityShort": {
                    "type": "number"
                },
                "securityId": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "dto.BalanceListResponse": {
            "type": "object",
            "properties": {
                "balances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.BalanceDTO"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationResponse"
                }
            }
        },
        "dto.BatchSummaryDTO": {
            "type": "object",
            "properties": {
                "failed": {
                    "type": "integer"
                },
                "successRate": {
                    "type": "number"
                },
                "successful": {
                    "type": "integer"
                },
                "totalRequested": {
                    "type": "integer"
                }
            }
        },
        "dto.ErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "traceId": {
                    "type": "string"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/dto.ErrorDetail"
                }
            }
        },
        "dto.HealthResponse": {
            "type": "object",
            "properties": {
                "checks": {
                    "type": "object",
                    "additionalProperties": true
                },
                "environment": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.PaginationResponse": {
            "type": "object",
            "properties": {
                "hasMore": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "dto.PortfolioSummaryDTO": {
            "type": "object",
            "properties": {
                "cashBalance": {
                    "type": "number"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "portfolioId": {
                    "type": "string"
                },
                "securities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SecurityPositionDTO"
                    }
                },
                "securityCount": {
                    "type": "integer"
                }
            }
        },
        "dto.SecurityPositionDTO": {
            "type": "object",
            "properties": {
                "lastUpdated": {
                    "type": "string"
                },
                "netQuantity": {
                    "type": "number"
                },
                "quantityLong": {
                    "type": "number"
                },
                "quantityShort": {
                    "type": "number"
                },
                "securityId": {
                    "type": "string"
                }
            }
        },
        "dto.TransactionBatchResponse": {
            "type": "object",
            "properties": {
                "failed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TransactionErrorDTO"
                    }
                },
                "successful": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TransactionResponseDTO"
                    }
                },
                "summary": {
                    "$ref": "#/definitions/dto.BatchSummaryDTO"
                }
            }
        },
        "dto.TransactionErrorDTO": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ValidationError"
                    }
                },
                "transaction": {
                    "$ref": "#/definitions/dto.TransactionPostDTO"
                }
            }
        },
        "dto.TransactionListResponse": {
            "type": "object",
            "properties": {
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationResponse"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TransactionResponseDTO"
                    }
                }
            }
        },
        "dto.TransactionPostDTO": {
            "type": "object",
            "required": [
                "portfolioId",
                "price",
                "quantity",
                "sourceId",
                "transactionDate",
                "transactionType"
            ],
            "properties": {
                "portfolioId": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "securityId": {
                    "type": "string"
                },
                "sourceId": {
                    "type": "string",
                    "maxLength": 50
                },
                "transactionDate": {
                    "type": "string"
                },
                "transactionType": {
                    "type": "string",
                    "enum": [
                        "BUY",
                        "SELL",
                        "SHORT",
                        "COVER",
                        "DEP",
                        "WD",
                        "IN",
                        "OUT"
                    ]
                }
            }
        },
        "dto.TransactionResponseDTO": {
            "type": "object",
            "properties": {
                "errorMessage": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "portfolioId": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "reprocessingAttempts": {
                    "type": "integer"
                },
                "securityId": {
                    "type": "string"
                },
                "sourceId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transactionDate": {
                    "type": "string"
                },
                "transactionType": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "dto.ValidationError": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API key for service authentication",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        }
    }
}