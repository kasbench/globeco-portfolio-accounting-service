name: Build and Push Multi-Architecture Docker Images

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Weekly rebuild on Sundays at 02:00 UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for the image'
        required: false
        default: 'manual'
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64'

env:
  REGISTRY: docker.io
  SERVER_IMAGE_NAME: kasbench/globeco-portfolio-accounting-service-server
  CLI_IMAGE_NAME: kasbench/globeco-portfolio-accounting-service-cli

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        driver-opts: network=host

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for server
      id: meta-server
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=GlobeCo Portfolio Accounting Service - Server
          org.opencontainers.image.description=Financial transaction processing and portfolio balance management microservice server
          org.opencontainers.image.vendor=KASBench
          org.opencontainers.image.url=https://github.com/kasbench/globeco-portfolio-accounting-service
          org.opencontainers.image.documentation=https://github.com/kasbench/globeco-portfolio-accounting-service/blob/main/README.md
          org.opencontainers.image.source=https://github.com/kasbench/globeco-portfolio-accounting-service
          org.opencontainers.image.licenses=MIT
          maintainer=noah@kasbench.org
          component=server

    - name: Extract metadata for CLI
      id: meta-cli
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.CLI_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=GlobeCo Portfolio Accounting Service - CLI
          org.opencontainers.image.description=Command-line interface for portfolio accounting transaction file processing
          org.opencontainers.image.vendor=KASBench
          org.opencontainers.image.url=https://github.com/kasbench/globeco-portfolio-accounting-service
          org.opencontainers.image.documentation=https://github.com/kasbench/globeco-portfolio-accounting-service/blob/main/README.md
          org.opencontainers.image.source=https://github.com/kasbench/globeco-portfolio-accounting-service
          org.opencontainers.image.licenses=MIT
          maintainer=noah@kasbench.org
          component=cli

    - name: Build and push server image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-server.outputs.tags }}
        labels: ${{ steps.meta-server.outputs.labels }}
        cache-from: type=gha,scope=server
        cache-to: type=gha,mode=max,scope=server
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta-server.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ fromJSON(steps.meta-server.outputs.json).labels['org.opencontainers.image.revision'] }}
          VERSION=${{ fromJSON(steps.meta-server.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Build and push CLI image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: cli
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-cli.outputs.tags }}
        labels: ${{ steps.meta-cli.outputs.labels }}
        cache-from: type=gha,scope=cli
        cache-to: type=gha,mode=max,scope=cli
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta-cli.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ fromJSON(steps.meta-cli.outputs.json).labels['org.opencontainers.image.revision'] }}
          VERSION=${{ fromJSON(steps.meta-cli.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Build and push development image
      if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: development
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:dev-latest
          ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:dev-${{ github.sha }}
        labels: ${{ steps.meta-server.outputs.labels }}
        cache-from: type=gha,scope=dev
        cache-to: type=gha,mode=max,scope=dev

    - name: Build and push testing image
      if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: testing
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:test-latest
          ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:test-${{ github.sha }}
        labels: ${{ steps.meta-server.outputs.labels }}
        cache-from: type=gha,scope=test
        cache-to: type=gha,mode=max,scope=test

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        image: [server, cli]
    
    steps:
    - name: Set image name
      id: image
      run: |
        if [ "${{ matrix.image }}" = "server" ]; then
          echo "name=${{ env.SERVER_IMAGE_NAME }}" >> $GITHUB_OUTPUT
        else
          echo "name=${{ env.CLI_IMAGE_NAME }}" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}:latest
        format: 'sarif'
        output: 'trivy-results-${{ matrix.image }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.image }}.sarif'

  update-deployment:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update image tag in Kubernetes manifests
      run: |
        # Update deployment.yaml with new server image tag
        sed -i "s|image: .*portfolio-accounting-service.*|image: ${{ env.SERVER_IMAGE_NAME }}:${{ github.sha }}|g" deployments/deployment.yaml
        
        # Update kustomization.yaml with new server image
        sed -i "s|name: .*portfolio-accounting-service.*|name: ${{ env.SERVER_IMAGE_NAME }}|g" deployments/kustomization.yaml
        sed -i "s|newTag: .*|newTag: ${{ github.sha }}|g" deployments/kustomization.yaml

    - name: Commit and push updated manifests
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add deployments/deployment.yaml deployments/kustomization.yaml
        git diff --staged --quiet || git commit -m "Update server image tag to ${{ github.sha }}"
        git push

  create-release:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## GlobeCo Portfolio Accounting Service ${{ github.ref_name }}
          
          ### Docker Images
          - **Server**: `${{ env.SERVER_IMAGE_NAME }}:${{ github.ref_name }}`
          - **CLI**: `${{ env.CLI_IMAGE_NAME }}:${{ github.ref_name }}`
          
          ### Multi-Architecture Support
          Both images support `linux/amd64` and `linux/arm64` architectures.
          
          ### Deployment
          ```bash
          # Update server image in Kubernetes
          kubectl set image deployment/portfolio-accounting-service \
            portfolio-accounting=${{ env.SERVER_IMAGE_NAME }}:${{ github.ref_name }} \
            -n globeco-portfolio-accounting
          
          # Run CLI for file processing
          docker run --rm -v /path/to/data:/data \
            ${{ env.CLI_IMAGE_NAME }}:${{ github.ref_name }} \
            process --file /data/transactions.csv
          ```
          
          ### Changes
          See [CHANGELOG.md](./CHANGELOG.md) for detailed changes in this release.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  notify:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify on success
      if: needs.build-and-push.result == 'success' && needs.security-scan.result == 'success'
      run: |
        echo "✅ Successfully built and pushed multi-architecture Docker images"
        echo "🖥️  Server image: ${{ env.SERVER_IMAGE_NAME }}"
        echo "⌨️  CLI image: ${{ env.CLI_IMAGE_NAME }}"
        echo "🔒 Security scans passed for both images"

    - name: Notify on failure
      if: needs.build-and-push.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "❌ Docker build or security scan failed"
        echo "📋 Check the workflow logs for details"
        exit 1 