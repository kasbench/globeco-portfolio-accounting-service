
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: globeco-portfolio-accounting-service-postgresql
  namespace: globeco
  labels:
    app.kubernetes.io/name: globeco-portfolio-accounting
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "17"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: globeco-suite
    app.kubernetes.io/managed-by: kubernetes
spec:
  serviceName: globeco-portfolio-accounting-service-postgresql
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: globeco-portfolio-accounting
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: globeco-portfolio-accounting
        app.kubernetes.io/instance: production
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: globeco-suite
    spec:
      initContainers:
      - name: init-postgres-data
        image: busybox:1.35
        command:
          - /bin/sh
          - -c
          - |
            mkdir -p /var/lib/postgresql/data/pgdata
            chown -R 999:999 /var/lib/postgresql/data/pgdata
            chmod 700 /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgresql-data-portfolio-accounting
          mountPath: /var/lib/postgresql/data
      containers:
      - name: postgresql
        image: postgres:17-alpine
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_DB
          value: portfolio_accounting
        - name: POSTGRES_USER
          value: portfolio_user
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "trust"
        args:
        - "-c"
        - "listen_addresses=0.0.0.0"
        volumeMounts:
        - name: postgresql-data-portfolio-accounting
          mountPath: /var/lib/postgresql/data
        - name: postgresql-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - portfolio_accounting
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - portfolio_accounting
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgresql-init
        configMap:
          name: postgresql-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data-portfolio-accounting
      labels:
        app.kubernetes.io/name: globeco-portfolio-accounting
        app.kubernetes.io/component: database
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: local-storage
      resources:
        requests:
          storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: globeco-portfolio-accounting-service-postgresql
  namespace: globeco
  labels:
    app.kubernetes.io/name: globeco-portfolio-accounting
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
  selector:
    app.kubernetes.io/name: globeco-portfolio-accounting
    app.kubernetes.io/component: database

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init-scripts
  namespace: globeco
  labels:
    app.kubernetes.io/name: globeco-portfolio-accounting
    app.kubernetes.io/component: database-init
data:
  01-init-user.sql: |
    -- Create portfolio_user with appropriate permissions
    CREATE USER portfolio_user WITH PASSWORD 'portfolio_pass';
    
    -- Grant necessary privileges to portfolio_user
    GRANT CONNECT ON DATABASE portfolio_accounting TO portfolio_user;
    GRANT USAGE ON SCHEMA public TO portfolio_user;
    GRANT CREATE ON SCHEMA public TO portfolio_user;
    
    -- Grant table privileges (these will apply to future tables)
    ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO portfolio_user;
    
    -- Grant sequence privileges (for auto-increment columns)
    ALTER DEFAULT PRIVILEGES IN SCHEMA public 
    GRANT USAGE, SELECT ON SEQUENCES TO portfolio_user;
    
    -- Create schema for portfolio accounting if needed
    CREATE SCHEMA IF NOT EXISTS portfolio_accounting AUTHORIZATION portfolio_user;
    
  02-init-extensions.sql: |
    -- Enable necessary PostgreSQL extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
  03-performance-tuning.sql: |
    -- Performance tuning for portfolio accounting workload
    ALTER SYSTEM SET shared_preload_libraries = 'pg_stat_statements';
    ALTER SYSTEM SET track_activity_query_size = 2048;
    ALTER SYSTEM SET pg_stat_statements.track = 'all';
    ALTER SYSTEM SET log_min_duration_statement = 1000;
    ALTER SYSTEM SET log_checkpoints = on;
    ALTER SYSTEM SET log_lock_waits = on;
    ALTER SYSTEM SET log_temp_files = 0;
    
    -- Connection and memory settings
    ALTER SYSTEM SET max_connections = 100;
    ALTER SYSTEM SET shared_buffers = '256MB';
    ALTER SYSTEM SET effective_cache_size = '768MB';
    ALTER SYSTEM SET maintenance_work_mem = '64MB';
    ALTER SYSTEM SET work_mem = '16MB';
    
    -- WAL settings for better performance
    ALTER SYSTEM SET wal_buffers = '16MB';
    ALTER SYSTEM SET checkpoint_completion_target = 0.7;
    ALTER SYSTEM SET wal_writer_delay = '200ms';
    
    -- Autovacuum tuning
    ALTER SYSTEM SET autovacuum_vacuum_scale_factor = 0.1;
    ALTER SYSTEM SET autovacuum_analyze_scale_factor = 0.05; 